{"version":3,"sources":["design1.png","design2.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","style","textAlign","action","method","Prepend","Text","Control","step","min","defaultValue","type","name","aria-label","Append","Label","as","rows","bg","Img","variant","src","d1","d2","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,8SC0E5BC,MA/Df,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,KACE,4BAAQA,UAAU,cAChB,2EACA,wEACA,yBAAKC,MAAO,CAACC,UAAW,SAAxB,oKAIA,mDACA,yBAAKD,MAAO,CAACC,UAAW,SAAxB,kHAEE,kDAFF,gHAGwB,6BAAK,6BAH7B,qGAIoG,6BAAK,6BAJzG,0GAKyG,6BAAK,6BAL9G,qIAO0B,6BAAK,6BAP/B,iSAYA,oDACA,kBAAC,IAAD,CAAMC,OAAO,iDAAiDC,OAAO,QACrE,kBAAC,IAAD,KACE,kBAAC,IAAWC,QAAZ,KACE,kBAAC,IAAWC,KAAZ,WAEF,kBAAC,IAAKC,QAAN,CAAcC,KAAM,EAAGC,IAAK,IAAKC,aAAc,IAAKC,KAAK,SAASC,KAAK,MAAMC,aAAW,mCACxF,kBAAC,IAAWC,OAAZ,KACE,kBAAC,IAAWR,KAAZ,aAEF,kBAAC,IAAWD,QAAZ,KACE,kBAAC,IAAWC,KAAZ,gBACA,kBAAC,IAAKC,QAAN,CAAcI,KAAK,QAAQC,KAAK,YAGlC,kBAAC,IAAKG,MAAN,0DAdF,IAc6E,6BAC3E,kBAAC,IAAKR,QAAN,CAAcS,GAAG,WAAWJ,KAAK,cAAcK,KAAM,IACrD,kBAAC,IAAD,CAAQN,KAAK,UAAb,iBAEF,8BAEF,yBAAKX,UAAU,cACb,2FAGA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMkB,GAAG,QACP,kBAAC,IAAKC,IAAN,CAAUC,QAAQ,MAAMC,IAAKC,OAE/B,kBAAC,IAAD,CAAMJ,GAAG,QACT,kBAAC,IAAKC,IAAN,CAAUC,QAAQ,MAAMC,IAAKE,YCrDrBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.556fdd93.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/design1.0a6e3db4.png\";","module.exports = __webpack_public_path__ + \"static/media/design2.54c4f7ba.png\";","import React from 'react';\nimport d1 from './design1.png';\nimport d2 from './design2.png';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container'\nimport Card from 'react-bootstrap/Card';\nimport CardGroup from 'react-bootstrap/CardGroup';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container>\n        <header className=\"App-header\">\n          <h1>Tired of poking around for the right angle?</h1>\n          <h3>Design the perfect toy to cum every time</h3>\n          <div style={{textAlign: \"left\"}}>\n            We work with 3 lucky buyers each week to design their dream anal toy, 3D print it, cast it in smooth silicone,\n            and ship the finished product to their back door.\n          </div>\n          <h1>Here's how it works</h1>\n          <div style={{textAlign: \"left\"}}>\n            1. You bid the maximum you're willing to pay to be one of this week's buyers. If you win, you'll be charged the \n            <i> highest losing bid</i> for your toy. In other words, you pay just enough to beat the other guy no matter how\n            extravagantly you bid.<br/><br/>\n            2. If your bid wins, we schedule the design session via email and charge the design deposit ($100)<br/><br/>\n            3. Our designer works with you live via Zoom for up to 75 minutes to digitally sculpt your perfect toy.<br/><br/>\n            4. If you're satisfied with your design we charge your bid price then print it, cast it in your choice of\n            colors, and ship to you.<br/><br/>\n            5. (Optional) Once you're a CustomButtStuff Customer, we're happy to stick with you on the journey to anal bliss.\n            Toy redesigns are $60 for 30 minutes of resculpting plus 75% of your original bid to produce new versions. If you want\n            copies of an existing design we charge $125 a piece.\n          </div>\n          <h1>Bid for your toy now</h1>\n          <Form action=\"https://formspree.io/custombuttstuff@gmail.com\" method=\"POST\" >\n          <InputGroup>\n            <InputGroup.Prepend>\n              <InputGroup.Text>$</InputGroup.Text>\n            </InputGroup.Prepend>\n            <Form.Control step={1} min={150} defaultValue={150} type=\"number\" name=\"bid\" aria-label=\"Amount (to the nearest dollar)\" />\n            <InputGroup.Append>\n              <InputGroup.Text>.00</InputGroup.Text>\n            </InputGroup.Append>\n            <InputGroup.Prepend>\n              <InputGroup.Text>Email: </InputGroup.Text>\n              <Form.Control type='email' name='email' />\n            </InputGroup.Prepend>\n          </InputGroup>\n            <Form.Label>Tell us what you're fantasizing about (optional) </Form.Label> <br/>\n            <Form.Control as='textarea' name=\"description\" rows={4} />\n            <Button type=\"submit\"> Submit Bid </Button>\n          </Form>\n          <br/>\n        </header>\n        <div className=\"App-header\">\n          <h2>\n            Sample toys from satisfied clients (shared with permission)\n          </h2>\n          <CardGroup>\n            <Card bg=\"dark\">\n              <Card.Img variant=\"top\" src={d1} />\n            </Card>\n            <Card bg=\"dark\">\n            <Card.Img variant=\"top\" src={d2} />\n          </Card>\n        </CardGroup>\n        </div>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}